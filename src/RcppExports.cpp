// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gRbase.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// mcsMAT_
SEXP mcsMAT_(SEXP XX_, SEXP OO_);
RcppExport SEXP gRbase_mcsMAT_(SEXP XX_SEXP, SEXP OO_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type OO_(OO_SEXP);
    rcpp_result_gen = Rcpp::wrap(mcsMAT_(XX_, OO_));
    return rcpp_result_gen;
END_RCPP
}
// do_mcs_sparse
IntegerVector do_mcs_sparse(const MSpMat& X, const IntegerVector& mcs0idx_);
static SEXP gRbase_do_mcs_sparse_try(SEXP XSEXP, SEXP mcs0idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const MSpMat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mcs0idx_(mcs0idx_SEXP);
    rcpp_result_gen = Rcpp::wrap(do_mcs_sparse(X, mcs0idx_));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_do_mcs_sparse(SEXP XSEXP, SEXP mcs0idx_SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_do_mcs_sparse_try(XSEXP, mcs0idx_SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// do_mcs_dense
SEXP do_mcs_dense(const NumericMatrix& X, const IntegerVector& mcs0idx);
static SEXP gRbase_do_mcs_dense_try(SEXP XSEXP, SEXP mcs0idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mcs0idx(mcs0idxSEXP);
    rcpp_result_gen = Rcpp::wrap(do_mcs_dense(X, mcs0idx));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_do_mcs_dense(SEXP XSEXP, SEXP mcs0idxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_do_mcs_dense_try(XSEXP, mcs0idxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mcsMAT0_
SEXP mcsMAT0_(SEXP XX_, SEXP mcs0idx_);
static SEXP gRbase_mcsMAT0__try(SEXP XX_SEXP, SEXP mcs0idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mcs0idx_(mcs0idx_SEXP);
    rcpp_result_gen = Rcpp::wrap(mcsMAT0_(XX_, mcs0idx_));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_mcsMAT0_(SEXP XX_SEXP, SEXP mcs0idx_SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_mcsMAT0__try(XX_SEXP, mcs0idx_SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// moralizeMAT
SEXP moralizeMAT(SEXP XX_);
RcppExport SEXP gRbase_moralizeMAT(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(moralizeMAT(XX_));
    return rcpp_result_gen;
END_RCPP
}
// rip_internal
List rip_internal(IntegerVector mcs0idx, CharacterVector vn, List cqlist);
static SEXP gRbase_rip_internal_try(SEXP mcs0idxSEXP, SEXP vnSEXP, SEXP cqlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type mcs0idx(mcs0idxSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP);
    Rcpp::traits::input_parameter< List >::type cqlist(cqlistSEXP);
    rcpp_result_gen = Rcpp::wrap(rip_internal(mcs0idx, vn, cqlist));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_rip_internal(SEXP mcs0idxSEXP, SEXP vnSEXP, SEXP cqlistSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_rip_internal_try(mcs0idxSEXP, vnSEXP, cqlistSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// do_getcq_sparse
SEXP do_getcq_sparse(SEXP XX_, const IntegerVector& mcs0idx_);
static SEXP gRbase_do_getcq_sparse_try(SEXP XX_SEXP, SEXP mcs0idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mcs0idx_(mcs0idx_SEXP);
    rcpp_result_gen = Rcpp::wrap(do_getcq_sparse(XX_, mcs0idx_));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_do_getcq_sparse(SEXP XX_SEXP, SEXP mcs0idx_SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_do_getcq_sparse_try(XX_SEXP, mcs0idx_SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// do_getcq_dense
SEXP do_getcq_dense(NumericMatrix X, const IntegerVector& mcs0idx);
static SEXP gRbase_do_getcq_dense_try(SEXP XSEXP, SEXP mcs0idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mcs0idx(mcs0idxSEXP);
    rcpp_result_gen = Rcpp::wrap(do_getcq_dense(X, mcs0idx));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_do_getcq_dense(SEXP XSEXP, SEXP mcs0idxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_do_getcq_dense_try(XSEXP, mcs0idxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getCliquesDec_
SEXP getCliquesDec_(SEXP XX_, SEXP mcs0idx_);
static SEXP gRbase_getCliquesDec__try(SEXP XX_SEXP, SEXP mcs0idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mcs0idx_(mcs0idx_SEXP);
    rcpp_result_gen = Rcpp::wrap(getCliquesDec_(XX_, mcs0idx_));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_getCliquesDec_(SEXP XX_SEXP, SEXP mcs0idx_SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_getCliquesDec__try(XX_SEXP, mcs0idx_SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// topoSortMAT_
SEXP topoSortMAT_(SEXP adjmat_);
RcppExport SEXP gRbase_topoSortMAT_(SEXP adjmat_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type adjmat_(adjmat_SEXP);
    rcpp_result_gen = Rcpp::wrap(topoSortMAT_(adjmat_));
    return rcpp_result_gen;
END_RCPP
}
// do_triangulate_elo
SEXP do_triangulate_elo(SEXP X_, SEXP ELO_);
RcppExport SEXP gRbase_do_triangulate_elo(SEXP X_SEXP, SEXP ELO_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ELO_(ELO_SEXP);
    rcpp_result_gen = Rcpp::wrap(do_triangulate_elo(X_, ELO_));
    return rcpp_result_gen;
END_RCPP
}
// triangulateMAT_
SEXP triangulateMAT_(SEXP adjmat_, SEXP nstates_);
RcppExport SEXP gRbase_triangulateMAT_(SEXP adjmat_SEXP, SEXP nstates_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type adjmat_(adjmat_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type nstates_(nstates_SEXP);
    rcpp_result_gen = Rcpp::wrap(triangulateMAT_(adjmat_, nstates_));
    return rcpp_result_gen;
END_RCPP
}
// MAT2ftM_
SEXP MAT2ftM_(SEXP XX_);
RcppExport SEXP gRbase_MAT2ftM_(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(MAT2ftM_(XX_));
    return rcpp_result_gen;
END_RCPP
}
// symMAT2ftM_
SEXP symMAT2ftM_(SEXP XX_);
RcppExport SEXP gRbase_symMAT2ftM_(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(symMAT2ftM_(XX_));
    return rcpp_result_gen;
END_RCPP
}
// issymMAT_
bool issymMAT_(SEXP A_);
RcppExport SEXP gRbase_issymMAT_(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(issymMAT_(A_));
    return rcpp_result_gen;
END_RCPP
}
// isugMAT_
bool isugMAT_(SEXP A_);
RcppExport SEXP gRbase_isugMAT_(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(isugMAT_(A_));
    return rcpp_result_gen;
END_RCPP
}
// isadjMAT_
bool isadjMAT_(SEXP A_);
RcppExport SEXP gRbase_isadjMAT_(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(isadjMAT_(A_));
    return rcpp_result_gen;
END_RCPP
}
// isdagMAT_
bool isdagMAT_(SEXP A_);
RcppExport SEXP gRbase_isdagMAT_(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(isdagMAT_(A_));
    return rcpp_result_gen;
END_RCPP
}
// matrix2dgCMatrix
SEXP matrix2dgCMatrix(SEXP XX_);
RcppExport SEXP gRbase_matrix2dgCMatrix(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(matrix2dgCMatrix(XX_));
    return rcpp_result_gen;
END_RCPP
}
// dgCMatrix2matrix
SEXP dgCMatrix2matrix(SEXP XX_);
RcppExport SEXP gRbase_dgCMatrix2matrix(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(dgCMatrix2matrix(XX_));
    return rcpp_result_gen;
END_RCPP
}
// which_matrix_index
SEXP which_matrix_index(SEXP XX_);
RcppExport SEXP gRbase_which_matrix_index(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(which_matrix_index(XX_));
    return rcpp_result_gen;
END_RCPP
}
// rowmat2list
SEXP rowmat2list(SEXP XX_);
RcppExport SEXP gRbase_rowmat2list(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(rowmat2list(XX_));
    return rcpp_result_gen;
END_RCPP
}
// colmat2list
SEXP colmat2list(SEXP XX_);
RcppExport SEXP gRbase_colmat2list(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(colmat2list(XX_));
    return rcpp_result_gen;
END_RCPP
}
// dagList2dgCMatrix
SEXP dagList2dgCMatrix(List LL, CharacterVector vn);
static SEXP gRbase_dagList2dgCMatrix_try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP);
    rcpp_result_gen = Rcpp::wrap(dagList2dgCMatrix(LL, vn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_dagList2dgCMatrix(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_dagList2dgCMatrix_try(LLSEXP, vnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ugList2dgCMatrix
SEXP ugList2dgCMatrix(List LL, CharacterVector vn);
static SEXP gRbase_ugList2dgCMatrix_try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP);
    rcpp_result_gen = Rcpp::wrap(ugList2dgCMatrix(LL, vn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_ugList2dgCMatrix(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_ugList2dgCMatrix_try(LLSEXP, vnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dagList2matrix
SEXP dagList2matrix(List LL, CharacterVector vn);
static SEXP gRbase_dagList2matrix_try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP);
    rcpp_result_gen = Rcpp::wrap(dagList2matrix(LL, vn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_dagList2matrix(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_dagList2matrix_try(LLSEXP, vnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ugList2matrix
SEXP ugList2matrix(List LL, CharacterVector vn);
static SEXP gRbase_ugList2matrix_try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP);
    rcpp_result_gen = Rcpp::wrap(ugList2matrix(LL, vn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_ugList2matrix(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_ugList2matrix_try(LLSEXP, vnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2tfList
List adjList2tfList(List LL);
static SEXP gRbase_adjList2tfList_try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2tfList(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2tfList(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_adjList2tfList_try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2ftList
List adjList2ftList(List LL);
static SEXP gRbase_adjList2ftList_try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2ftList(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2ftList(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_adjList2ftList_try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2ftM
CharacterMatrix adjList2ftM(List LL);
static SEXP gRbase_adjList2ftM_try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2ftM(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2ftM(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_adjList2ftM_try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2tfM
CharacterMatrix adjList2tfM(List LL);
static SEXP gRbase_adjList2tfM_try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2tfM(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2tfM(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_adjList2tfM_try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2matrix
SEXP adjList2matrix(List LL);
static SEXP gRbase_adjList2matrix_try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2matrix(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2matrix(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_adjList2matrix_try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2dgCMatrix
SEXP adjList2dgCMatrix(List LL);
static SEXP gRbase_adjList2dgCMatrix_try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2dgCMatrix(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2dgCMatrix(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_adjList2dgCMatrix_try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cell2entry_
int cell2entry_(const NumericVector& cell, const IntegerVector& dim);
static SEXP gRbase_cell2entry__try(SEXP cellSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cell2entry_(cell, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_cell2entry_(SEXP cellSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_cell2entry__try(cellSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// next_cell_
NumericVector next_cell_(const NumericVector& cell, const IntegerVector& dim);
static SEXP gRbase_next_cell__try(SEXP cellSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(next_cell_(cell, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_next_cell_(SEXP cellSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_next_cell__try(cellSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// next_cell_slice_
NumericVector next_cell_slice_(const NumericVector& cell, const IntegerVector& dim, const IntegerVector& slice_set);
static SEXP gRbase_next_cell_slice__try(SEXP cellSEXP, SEXP dimSEXP, SEXP slice_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type slice_set(slice_setSEXP);
    rcpp_result_gen = Rcpp::wrap(next_cell_slice_(cell, dim, slice_set));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_next_cell_slice_(SEXP cellSEXP, SEXP dimSEXP, SEXP slice_setSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_next_cell_slice__try(cellSEXP, dimSEXP, slice_setSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// slice2entry_
IntegerVector slice2entry_(const IntegerVector& slice_cell, const IntegerVector& slice_set, const IntegerVector& dim);
static SEXP gRbase_slice2entry__try(SEXP slice_cellSEXP, SEXP slice_setSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type slice_cell(slice_cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type slice_set(slice_setSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(slice2entry_(slice_cell, slice_set, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_slice2entry_(SEXP slice_cellSEXP, SEXP slice_setSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_slice2entry__try(slice_cellSEXP, slice_setSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_cell_number_
int get_cell_number_(const NumericVector& cell, const IntegerVector& dim, const IntegerVector& perm);
static SEXP gRbase_get_cell_number__try(SEXP cellSEXP, SEXP dimSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cell_number_(cell, dim, perm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_get_cell_number_(SEXP cellSEXP, SEXP dimSEXP, SEXP permSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_get_cell_number__try(cellSEXP, dimSEXP, permSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// perm_cell_entries_
IntegerVector perm_cell_entries_(const IntegerVector& perm, const IntegerVector& dim);
static SEXP gRbase_perm_cell_entries__try(SEXP permSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type perm(permSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_cell_entries_(perm, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_perm_cell_entries_(SEXP permSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_perm_cell_entries__try(permSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tabPerm__
SEXP tabPerm__(const SEXP& tab, const SEXP& perm);
static SEXP gRbase_tabPerm___try(SEXP tabSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(tabPerm__(tab, perm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tabPerm__(SEXP tabSEXP, SEXP permSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tabPerm___try(tabSEXP, permSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_perm_
SEXP tab_perm_(const SEXP& tab, const SEXP& perm);
static SEXP gRbase_tab_perm__try(SEXP tabSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_perm_(tab, perm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_perm_(SEXP tabSEXP, SEXP permSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_perm__try(tabSEXP, permSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_expand_
SEXP tab_expand_(const SEXP& tab, const SEXP& aux);
static SEXP gRbase_tab_expand__try(SEXP tabSEXP, SEXP auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type aux(auxSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_expand_(tab, aux));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_expand_(SEXP tabSEXP, SEXP auxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_expand__try(tabSEXP, auxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_align_
SEXP tab_align_(const SEXP& tab1, const SEXP& tab2);
static SEXP gRbase_tab_align__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_align_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_align_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_align__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_marg_
SEXP tab_marg_(const SEXP& tab, const SEXP& marg);
static SEXP gRbase_tab_marg__try(SEXP tabSEXP, SEXP margSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type marg(margSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_marg_(tab, marg));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_marg_(SEXP tabSEXP, SEXP margSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_marg__try(tabSEXP, margSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_op_
NumericVector tab_op_(const NumericVector& tab1, const NumericVector& tab2, const char op);
static SEXP gRbase_tab_op__try(SEXP tab1SEXP, SEXP tab2SEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    Rcpp::traits::input_parameter< const char >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_op_(tab1, tab2, op));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_op_(SEXP tab1SEXP, SEXP tab2SEXP, SEXP opSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_op__try(tab1SEXP, tab2SEXP, opSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_add_
NumericVector tab_add_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP gRbase_tab_add__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_add_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_add_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_add__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_subt_
NumericVector tab_subt_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP gRbase_tab_subt__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_subt_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_subt_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_subt__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_mult_
NumericVector tab_mult_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP gRbase_tab_mult__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_mult_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_mult_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_mult__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_div_
NumericVector tab_div_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP gRbase_tab_div__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_div_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_div_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_div__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_div0_
NumericVector tab_div0_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP gRbase_tab_div0__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_div0_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_div0_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_div0__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_equal_
bool tab_equal_(const NumericVector& tab1, const NumericVector& tab2, double eps);
static SEXP gRbase_tab_equal__try(SEXP tab1SEXP, SEXP tab2SEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_equal_(tab1, tab2, eps));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_equal_(SEXP tab1SEXP, SEXP tab2SEXP, SEXP epsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_equal__try(tab1SEXP, tab2SEXP, epsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_list_mult_
NumericVector tab_list_mult_(const List& lst);
static SEXP gRbase_tab_list_mult__try(SEXP lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List& >::type lst(lstSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_list_mult_(lst));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_list_mult_(SEXP lstSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_list_mult__try(lstSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_list_add_
NumericVector tab_list_add_(const List& lst);
static SEXP gRbase_tab_list_add__try(SEXP lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List& >::type lst(lstSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_list_add_(lst));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_tab_list_add_(SEXP lstSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_tab_list_add__try(lstSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// is_number_vector_
bool is_number_vector_(const SEXP& obj);
RcppExport SEXP gRbase_is_number_vector_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(is_number_vector_(obj));
    return rcpp_result_gen;
END_RCPP
}
// is_dimnames_
bool is_dimnames_(const SEXP& obj);
RcppExport SEXP gRbase_is_dimnames_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(is_dimnames_(obj));
    return rcpp_result_gen;
END_RCPP
}
// is_named_array_
bool is_named_array_(const SEXP& obj);
RcppExport SEXP gRbase_is_named_array_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(is_named_array_(obj));
    return rcpp_result_gen;
END_RCPP
}
// dimnames_match_
bool dimnames_match_(const SEXP& tab1, const SEXP& tab2, bool verbose);
RcppExport SEXP gRbase_dimnames_match_(SEXP tab1SEXP, SEXP tab2SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type tab2(tab2SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(dimnames_match_(tab1, tab2, verbose));
    return rcpp_result_gen;
END_RCPP
}
// is_subsetof_
bool is_subsetof_(CharacterVector x, CharacterVector set);
static SEXP gRbase_is_subsetof__try(SEXP xSEXP, SEXP setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type set(setSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subsetof_(x, set));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_is_subsetof_(SEXP xSEXP, SEXP setSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_is_subsetof__try(xSEXP, setSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_superset_
IntegerVector get_superset_(CharacterVector x, List setlist, bool all);
static SEXP gRbase_get_superset__try(SEXP xSEXP, SEXP setlistSEXP, SEXP allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type setlist(setlistSEXP);
    Rcpp::traits::input_parameter< bool >::type all(allSEXP);
    rcpp_result_gen = Rcpp::wrap(get_superset_(x, setlist, all));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_get_superset_(SEXP xSEXP, SEXP setlistSEXP, SEXP allSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_get_superset__try(xSEXP, setlistSEXP, allSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_subset_
IntegerVector get_subset_(CharacterVector x, List setlist, bool all);
static SEXP gRbase_get_subset__try(SEXP xSEXP, SEXP setlistSEXP, SEXP allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type setlist(setlistSEXP);
    Rcpp::traits::input_parameter< bool >::type all(allSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subset_(x, setlist, all));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_get_subset_(SEXP xSEXP, SEXP setlistSEXP, SEXP allSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_get_subset__try(xSEXP, setlistSEXP, allSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// allSubsets0__
List allSubsets0__(const IntegerVector& x);
static SEXP gRbase_allSubsets0___try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(allSubsets0__(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_allSubsets0__(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_allSubsets0___try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// allSubsets__
SEXP allSubsets__(SEXP& x);
static SEXP gRbase_allSubsets___try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(allSubsets__(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_allSubsets__(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(gRbase_allSubsets___try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// names2pairsM
SEXP names2pairsM(CharacterVector x, CharacterVector y, bool sort, std::string result);
RcppExport SEXP gRbase_names2pairsM(SEXP xSEXP, SEXP ySEXP, SEXP sortSEXP, SEXP resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type sort(sortSEXP);
    Rcpp::traits::input_parameter< std::string >::type result(resultSEXP);
    rcpp_result_gen = Rcpp::wrap(names2pairsM(x, y, sort, result));
    return rcpp_result_gen;
END_RCPP
}
// solveSPD
SEXP solveSPD(arma::mat X);
RcppExport SEXP gRbase_solveSPD(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(solveSPD(X));
    return rcpp_result_gen;
END_RCPP
}
// sp_setXtf1
SEXP sp_setXtf1(SEXP XX_, SEXP TF_);
RcppExport SEXP gRbase_sp_setXtf1(SEXP XX_SEXP, SEXP TF_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type TF_(TF_SEXP);
    rcpp_result_gen = Rcpp::wrap(sp_setXtf1(XX_, TF_));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int gRbase_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("IntegerVector(*do_mcs_sparse)(const MSpMat&,const IntegerVector&)");
        signatures.insert("SEXP(*do_mcs_dense)(const NumericMatrix&,const IntegerVector&)");
        signatures.insert("SEXP(*mcsMAT0_)(SEXP,SEXP)");
        signatures.insert("List(*rip_internal)(IntegerVector,CharacterVector,List)");
        signatures.insert("SEXP(*do_getcq_sparse)(SEXP,const IntegerVector&)");
        signatures.insert("SEXP(*do_getcq_dense)(NumericMatrix,const IntegerVector&)");
        signatures.insert("SEXP(*getCliquesDec_)(SEXP,SEXP)");
        signatures.insert("SEXP(*dagList2dgCMatrix)(List,CharacterVector)");
        signatures.insert("SEXP(*ugList2dgCMatrix)(List,CharacterVector)");
        signatures.insert("SEXP(*dagList2matrix)(List,CharacterVector)");
        signatures.insert("SEXP(*ugList2matrix)(List,CharacterVector)");
        signatures.insert("List(*adjList2tfList)(List)");
        signatures.insert("List(*adjList2ftList)(List)");
        signatures.insert("CharacterMatrix(*adjList2ftM)(List)");
        signatures.insert("CharacterMatrix(*adjList2tfM)(List)");
        signatures.insert("SEXP(*adjList2matrix)(List)");
        signatures.insert("SEXP(*adjList2dgCMatrix)(List)");
        signatures.insert("int(*cell2entry_)(const NumericVector&,const IntegerVector&)");
        signatures.insert("NumericVector(*next_cell_)(const NumericVector&,const IntegerVector&)");
        signatures.insert("NumericVector(*next_cell_slice_)(const NumericVector&,const IntegerVector&,const IntegerVector&)");
        signatures.insert("IntegerVector(*slice2entry_)(const IntegerVector&,const IntegerVector&,const IntegerVector&)");
        signatures.insert("int(*get_cell_number_)(const NumericVector&,const IntegerVector&,const IntegerVector&)");
        signatures.insert("IntegerVector(*perm_cell_entries_)(const IntegerVector&,const IntegerVector&)");
        signatures.insert("SEXP(*tabPerm__)(const SEXP&,const SEXP&)");
        signatures.insert("SEXP(*tab_perm_)(const SEXP&,const SEXP&)");
        signatures.insert("SEXP(*tab_expand_)(const SEXP&,const SEXP&)");
        signatures.insert("SEXP(*tab_align_)(const SEXP&,const SEXP&)");
        signatures.insert("SEXP(*tab_marg_)(const SEXP&,const SEXP&)");
        signatures.insert("NumericVector(*tab_op_)(const NumericVector&,const NumericVector&,const char)");
        signatures.insert("NumericVector(*tab_add_)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tab_subt_)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tab_mult_)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tab_div_)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tab_div0_)(const NumericVector&,const NumericVector&)");
        signatures.insert("bool(*tab_equal_)(const NumericVector&,const NumericVector&,double)");
        signatures.insert("NumericVector(*tab_list_mult_)(const List&)");
        signatures.insert("NumericVector(*tab_list_add_)(const List&)");
        signatures.insert("bool(*is_subsetof_)(CharacterVector,CharacterVector)");
        signatures.insert("IntegerVector(*get_superset_)(CharacterVector,List,bool)");
        signatures.insert("IntegerVector(*get_subset_)(CharacterVector,List,bool)");
        signatures.insert("List(*allSubsets0__)(const IntegerVector&)");
        signatures.insert("SEXP(*allSubsets__)(SEXP&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP gRbase_RcppExport_registerCCallable() { 
    R_RegisterCCallable("gRbase", "gRbase_do_mcs_sparse", (DL_FUNC)gRbase_do_mcs_sparse_try);
    R_RegisterCCallable("gRbase", "gRbase_do_mcs_dense", (DL_FUNC)gRbase_do_mcs_dense_try);
    R_RegisterCCallable("gRbase", "gRbase_mcsMAT0_", (DL_FUNC)gRbase_mcsMAT0__try);
    R_RegisterCCallable("gRbase", "gRbase_rip_internal", (DL_FUNC)gRbase_rip_internal_try);
    R_RegisterCCallable("gRbase", "gRbase_do_getcq_sparse", (DL_FUNC)gRbase_do_getcq_sparse_try);
    R_RegisterCCallable("gRbase", "gRbase_do_getcq_dense", (DL_FUNC)gRbase_do_getcq_dense_try);
    R_RegisterCCallable("gRbase", "gRbase_getCliquesDec_", (DL_FUNC)gRbase_getCliquesDec__try);
    R_RegisterCCallable("gRbase", "gRbase_dagList2dgCMatrix", (DL_FUNC)gRbase_dagList2dgCMatrix_try);
    R_RegisterCCallable("gRbase", "gRbase_ugList2dgCMatrix", (DL_FUNC)gRbase_ugList2dgCMatrix_try);
    R_RegisterCCallable("gRbase", "gRbase_dagList2matrix", (DL_FUNC)gRbase_dagList2matrix_try);
    R_RegisterCCallable("gRbase", "gRbase_ugList2matrix", (DL_FUNC)gRbase_ugList2matrix_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2tfList", (DL_FUNC)gRbase_adjList2tfList_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2ftList", (DL_FUNC)gRbase_adjList2ftList_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2ftM", (DL_FUNC)gRbase_adjList2ftM_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2tfM", (DL_FUNC)gRbase_adjList2tfM_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2matrix", (DL_FUNC)gRbase_adjList2matrix_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2dgCMatrix", (DL_FUNC)gRbase_adjList2dgCMatrix_try);
    R_RegisterCCallable("gRbase", "gRbase_cell2entry_", (DL_FUNC)gRbase_cell2entry__try);
    R_RegisterCCallable("gRbase", "gRbase_next_cell_", (DL_FUNC)gRbase_next_cell__try);
    R_RegisterCCallable("gRbase", "gRbase_next_cell_slice_", (DL_FUNC)gRbase_next_cell_slice__try);
    R_RegisterCCallable("gRbase", "gRbase_slice2entry_", (DL_FUNC)gRbase_slice2entry__try);
    R_RegisterCCallable("gRbase", "gRbase_get_cell_number_", (DL_FUNC)gRbase_get_cell_number__try);
    R_RegisterCCallable("gRbase", "gRbase_perm_cell_entries_", (DL_FUNC)gRbase_perm_cell_entries__try);
    R_RegisterCCallable("gRbase", "gRbase_tabPerm__", (DL_FUNC)gRbase_tabPerm___try);
    R_RegisterCCallable("gRbase", "gRbase_tab_perm_", (DL_FUNC)gRbase_tab_perm__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_expand_", (DL_FUNC)gRbase_tab_expand__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_align_", (DL_FUNC)gRbase_tab_align__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_marg_", (DL_FUNC)gRbase_tab_marg__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_op_", (DL_FUNC)gRbase_tab_op__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_add_", (DL_FUNC)gRbase_tab_add__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_subt_", (DL_FUNC)gRbase_tab_subt__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_mult_", (DL_FUNC)gRbase_tab_mult__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_div_", (DL_FUNC)gRbase_tab_div__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_div0_", (DL_FUNC)gRbase_tab_div0__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_equal_", (DL_FUNC)gRbase_tab_equal__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_list_mult_", (DL_FUNC)gRbase_tab_list_mult__try);
    R_RegisterCCallable("gRbase", "gRbase_tab_list_add_", (DL_FUNC)gRbase_tab_list_add__try);
    R_RegisterCCallable("gRbase", "gRbase_is_subsetof_", (DL_FUNC)gRbase_is_subsetof__try);
    R_RegisterCCallable("gRbase", "gRbase_get_superset_", (DL_FUNC)gRbase_get_superset__try);
    R_RegisterCCallable("gRbase", "gRbase_get_subset_", (DL_FUNC)gRbase_get_subset__try);
    R_RegisterCCallable("gRbase", "gRbase_allSubsets0__", (DL_FUNC)gRbase_allSubsets0___try);
    R_RegisterCCallable("gRbase", "gRbase_allSubsets__", (DL_FUNC)gRbase_allSubsets___try);
    R_RegisterCCallable("gRbase", "gRbase_RcppExport_validate", (DL_FUNC)gRbase_RcppExport_validate);
    return R_NilValue;
}
