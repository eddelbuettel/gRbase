// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_gRbase_RCPPEXPORTS_H_GEN_
#define RCPP_gRbase_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

namespace gRbase {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("gRbase", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("gRbase", "gRbase_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in gRbase");
            }
        }
    }

    inline IntegerVector do_mcs_sparse(const MSpMat& X, const IntegerVector& mcs0idx_) {
        typedef SEXP(*Ptr_do_mcs_sparse)(SEXP,SEXP);
        static Ptr_do_mcs_sparse p_do_mcs_sparse = NULL;
        if (p_do_mcs_sparse == NULL) {
            validateSignature("IntegerVector(*do_mcs_sparse)(const MSpMat&,const IntegerVector&)");
            p_do_mcs_sparse = (Ptr_do_mcs_sparse)R_GetCCallable("gRbase", "gRbase_do_mcs_sparse");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_do_mcs_sparse(Rcpp::wrap(X), Rcpp::wrap(mcs0idx_));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline SEXP do_mcs_dense(const NumericMatrix& X, const IntegerVector& mcs0idx) {
        typedef SEXP(*Ptr_do_mcs_dense)(SEXP,SEXP);
        static Ptr_do_mcs_dense p_do_mcs_dense = NULL;
        if (p_do_mcs_dense == NULL) {
            validateSignature("SEXP(*do_mcs_dense)(const NumericMatrix&,const IntegerVector&)");
            p_do_mcs_dense = (Ptr_do_mcs_dense)R_GetCCallable("gRbase", "gRbase_do_mcs_dense");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_do_mcs_dense(Rcpp::wrap(X), Rcpp::wrap(mcs0idx));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP mcsMAT0_(SEXP XX_, SEXP mcs0idx_ = R_NilValue) {
        typedef SEXP(*Ptr_mcsMAT0_)(SEXP,SEXP);
        static Ptr_mcsMAT0_ p_mcsMAT0_ = NULL;
        if (p_mcsMAT0_ == NULL) {
            validateSignature("SEXP(*mcsMAT0_)(SEXP,SEXP)");
            p_mcsMAT0_ = (Ptr_mcsMAT0_)R_GetCCallable("gRbase", "gRbase_mcsMAT0_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_mcsMAT0_(Rcpp::wrap(XX_), Rcpp::wrap(mcs0idx_));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline List rip_internal(IntegerVector mcs0idx, CharacterVector vn, List cqlist) {
        typedef SEXP(*Ptr_rip_internal)(SEXP,SEXP,SEXP);
        static Ptr_rip_internal p_rip_internal = NULL;
        if (p_rip_internal == NULL) {
            validateSignature("List(*rip_internal)(IntegerVector,CharacterVector,List)");
            p_rip_internal = (Ptr_rip_internal)R_GetCCallable("gRbase", "gRbase_rip_internal");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rip_internal(Rcpp::wrap(mcs0idx), Rcpp::wrap(vn), Rcpp::wrap(cqlist));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline SEXP do_getcq_sparse(SEXP XX_, const IntegerVector& mcs0idx_) {
        typedef SEXP(*Ptr_do_getcq_sparse)(SEXP,SEXP);
        static Ptr_do_getcq_sparse p_do_getcq_sparse = NULL;
        if (p_do_getcq_sparse == NULL) {
            validateSignature("SEXP(*do_getcq_sparse)(SEXP,const IntegerVector&)");
            p_do_getcq_sparse = (Ptr_do_getcq_sparse)R_GetCCallable("gRbase", "gRbase_do_getcq_sparse");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_do_getcq_sparse(Rcpp::wrap(XX_), Rcpp::wrap(mcs0idx_));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP do_getcq_dense(NumericMatrix X, const IntegerVector& mcs0idx) {
        typedef SEXP(*Ptr_do_getcq_dense)(SEXP,SEXP);
        static Ptr_do_getcq_dense p_do_getcq_dense = NULL;
        if (p_do_getcq_dense == NULL) {
            validateSignature("SEXP(*do_getcq_dense)(NumericMatrix,const IntegerVector&)");
            p_do_getcq_dense = (Ptr_do_getcq_dense)R_GetCCallable("gRbase", "gRbase_do_getcq_dense");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_do_getcq_dense(Rcpp::wrap(X), Rcpp::wrap(mcs0idx));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP getCliquesDec_(SEXP XX_, SEXP mcs0idx_ = R_NilValue) {
        typedef SEXP(*Ptr_getCliquesDec_)(SEXP,SEXP);
        static Ptr_getCliquesDec_ p_getCliquesDec_ = NULL;
        if (p_getCliquesDec_ == NULL) {
            validateSignature("SEXP(*getCliquesDec_)(SEXP,SEXP)");
            p_getCliquesDec_ = (Ptr_getCliquesDec_)R_GetCCallable("gRbase", "gRbase_getCliquesDec_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getCliquesDec_(Rcpp::wrap(XX_), Rcpp::wrap(mcs0idx_));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP dagList2dgCMatrix(List LL, CharacterVector vn) {
        typedef SEXP(*Ptr_dagList2dgCMatrix)(SEXP,SEXP);
        static Ptr_dagList2dgCMatrix p_dagList2dgCMatrix = NULL;
        if (p_dagList2dgCMatrix == NULL) {
            validateSignature("SEXP(*dagList2dgCMatrix)(List,CharacterVector)");
            p_dagList2dgCMatrix = (Ptr_dagList2dgCMatrix)R_GetCCallable("gRbase", "gRbase_dagList2dgCMatrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dagList2dgCMatrix(Rcpp::wrap(LL), Rcpp::wrap(vn));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP ugList2dgCMatrix(List LL, CharacterVector vn) {
        typedef SEXP(*Ptr_ugList2dgCMatrix)(SEXP,SEXP);
        static Ptr_ugList2dgCMatrix p_ugList2dgCMatrix = NULL;
        if (p_ugList2dgCMatrix == NULL) {
            validateSignature("SEXP(*ugList2dgCMatrix)(List,CharacterVector)");
            p_ugList2dgCMatrix = (Ptr_ugList2dgCMatrix)R_GetCCallable("gRbase", "gRbase_ugList2dgCMatrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ugList2dgCMatrix(Rcpp::wrap(LL), Rcpp::wrap(vn));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP dagList2matrix(List LL, CharacterVector vn) {
        typedef SEXP(*Ptr_dagList2matrix)(SEXP,SEXP);
        static Ptr_dagList2matrix p_dagList2matrix = NULL;
        if (p_dagList2matrix == NULL) {
            validateSignature("SEXP(*dagList2matrix)(List,CharacterVector)");
            p_dagList2matrix = (Ptr_dagList2matrix)R_GetCCallable("gRbase", "gRbase_dagList2matrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dagList2matrix(Rcpp::wrap(LL), Rcpp::wrap(vn));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP ugList2matrix(List LL, CharacterVector vn) {
        typedef SEXP(*Ptr_ugList2matrix)(SEXP,SEXP);
        static Ptr_ugList2matrix p_ugList2matrix = NULL;
        if (p_ugList2matrix == NULL) {
            validateSignature("SEXP(*ugList2matrix)(List,CharacterVector)");
            p_ugList2matrix = (Ptr_ugList2matrix)R_GetCCallable("gRbase", "gRbase_ugList2matrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ugList2matrix(Rcpp::wrap(LL), Rcpp::wrap(vn));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline List adjList2tfList(List LL) {
        typedef SEXP(*Ptr_adjList2tfList)(SEXP);
        static Ptr_adjList2tfList p_adjList2tfList = NULL;
        if (p_adjList2tfList == NULL) {
            validateSignature("List(*adjList2tfList)(List)");
            p_adjList2tfList = (Ptr_adjList2tfList)R_GetCCallable("gRbase", "gRbase_adjList2tfList");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_adjList2tfList(Rcpp::wrap(LL));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List adjList2ftList(List LL) {
        typedef SEXP(*Ptr_adjList2ftList)(SEXP);
        static Ptr_adjList2ftList p_adjList2ftList = NULL;
        if (p_adjList2ftList == NULL) {
            validateSignature("List(*adjList2ftList)(List)");
            p_adjList2ftList = (Ptr_adjList2ftList)R_GetCCallable("gRbase", "gRbase_adjList2ftList");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_adjList2ftList(Rcpp::wrap(LL));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline CharacterMatrix adjList2ftM(List LL) {
        typedef SEXP(*Ptr_adjList2ftM)(SEXP);
        static Ptr_adjList2ftM p_adjList2ftM = NULL;
        if (p_adjList2ftM == NULL) {
            validateSignature("CharacterMatrix(*adjList2ftM)(List)");
            p_adjList2ftM = (Ptr_adjList2ftM)R_GetCCallable("gRbase", "gRbase_adjList2ftM");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_adjList2ftM(Rcpp::wrap(LL));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<CharacterMatrix >(rcpp_result_gen);
    }

    inline CharacterMatrix adjList2tfM(List LL) {
        typedef SEXP(*Ptr_adjList2tfM)(SEXP);
        static Ptr_adjList2tfM p_adjList2tfM = NULL;
        if (p_adjList2tfM == NULL) {
            validateSignature("CharacterMatrix(*adjList2tfM)(List)");
            p_adjList2tfM = (Ptr_adjList2tfM)R_GetCCallable("gRbase", "gRbase_adjList2tfM");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_adjList2tfM(Rcpp::wrap(LL));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<CharacterMatrix >(rcpp_result_gen);
    }

    inline SEXP adjList2matrix(List LL) {
        typedef SEXP(*Ptr_adjList2matrix)(SEXP);
        static Ptr_adjList2matrix p_adjList2matrix = NULL;
        if (p_adjList2matrix == NULL) {
            validateSignature("SEXP(*adjList2matrix)(List)");
            p_adjList2matrix = (Ptr_adjList2matrix)R_GetCCallable("gRbase", "gRbase_adjList2matrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_adjList2matrix(Rcpp::wrap(LL));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP adjList2dgCMatrix(List LL) {
        typedef SEXP(*Ptr_adjList2dgCMatrix)(SEXP);
        static Ptr_adjList2dgCMatrix p_adjList2dgCMatrix = NULL;
        if (p_adjList2dgCMatrix == NULL) {
            validateSignature("SEXP(*adjList2dgCMatrix)(List)");
            p_adjList2dgCMatrix = (Ptr_adjList2dgCMatrix)R_GetCCallable("gRbase", "gRbase_adjList2dgCMatrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_adjList2dgCMatrix(Rcpp::wrap(LL));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline bool is_subsetof_(CharacterVector x, CharacterVector set) {
        typedef SEXP(*Ptr_is_subsetof_)(SEXP,SEXP);
        static Ptr_is_subsetof_ p_is_subsetof_ = NULL;
        if (p_is_subsetof_ == NULL) {
            validateSignature("bool(*is_subsetof_)(CharacterVector,CharacterVector)");
            p_is_subsetof_ = (Ptr_is_subsetof_)R_GetCCallable("gRbase", "gRbase_is_subsetof_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_is_subsetof_(Rcpp::wrap(x), Rcpp::wrap(set));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

    inline IntegerVector get_superset_(CharacterVector x, List setlist, bool all = false) {
        typedef SEXP(*Ptr_get_superset_)(SEXP,SEXP,SEXP);
        static Ptr_get_superset_ p_get_superset_ = NULL;
        if (p_get_superset_ == NULL) {
            validateSignature("IntegerVector(*get_superset_)(CharacterVector,List,bool)");
            p_get_superset_ = (Ptr_get_superset_)R_GetCCallable("gRbase", "gRbase_get_superset_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_superset_(Rcpp::wrap(x), Rcpp::wrap(setlist), Rcpp::wrap(all));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector get_subset_(CharacterVector x, List setlist, bool all = false) {
        typedef SEXP(*Ptr_get_subset_)(SEXP,SEXP,SEXP);
        static Ptr_get_subset_ p_get_subset_ = NULL;
        if (p_get_subset_ == NULL) {
            validateSignature("IntegerVector(*get_subset_)(CharacterVector,List,bool)");
            p_get_subset_ = (Ptr_get_subset_)R_GetCCallable("gRbase", "gRbase_get_subset_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_subset_(Rcpp::wrap(x), Rcpp::wrap(setlist), Rcpp::wrap(all));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline List allSubsets0__(const IntegerVector& x) {
        typedef SEXP(*Ptr_allSubsets0__)(SEXP);
        static Ptr_allSubsets0__ p_allSubsets0__ = NULL;
        if (p_allSubsets0__ == NULL) {
            validateSignature("List(*allSubsets0__)(const IntegerVector&)");
            p_allSubsets0__ = (Ptr_allSubsets0__)R_GetCCallable("gRbase", "gRbase_allSubsets0__");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_allSubsets0__(Rcpp::wrap(x));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline SEXP allSubsets__(SEXP& x) {
        typedef SEXP(*Ptr_allSubsets__)(SEXP);
        static Ptr_allSubsets__ p_allSubsets__ = NULL;
        if (p_allSubsets__ == NULL) {
            validateSignature("SEXP(*allSubsets__)(SEXP&)");
            p_allSubsets__ = (Ptr_allSubsets__)R_GetCCallable("gRbase", "gRbase_allSubsets__");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_allSubsets__(Rcpp::wrap(x));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline int cell2entry_(const NumericVector& cell, const IntegerVector& dim) {
        typedef SEXP(*Ptr_cell2entry_)(SEXP,SEXP);
        static Ptr_cell2entry_ p_cell2entry_ = NULL;
        if (p_cell2entry_ == NULL) {
            validateSignature("int(*cell2entry_)(const NumericVector&,const IntegerVector&)");
            p_cell2entry_ = (Ptr_cell2entry_)R_GetCCallable("gRbase", "gRbase_cell2entry_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cell2entry_(Rcpp::wrap(cell), Rcpp::wrap(dim));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline NumericVector next_cell_(const NumericVector& cell, const IntegerVector& dim) {
        typedef SEXP(*Ptr_next_cell_)(SEXP,SEXP);
        static Ptr_next_cell_ p_next_cell_ = NULL;
        if (p_next_cell_ == NULL) {
            validateSignature("NumericVector(*next_cell_)(const NumericVector&,const IntegerVector&)");
            p_next_cell_ = (Ptr_next_cell_)R_GetCCallable("gRbase", "gRbase_next_cell_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_next_cell_(Rcpp::wrap(cell), Rcpp::wrap(dim));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector next_cell_slice_(const NumericVector& cell, const IntegerVector& dim, const IntegerVector& slice_set) {
        typedef SEXP(*Ptr_next_cell_slice_)(SEXP,SEXP,SEXP);
        static Ptr_next_cell_slice_ p_next_cell_slice_ = NULL;
        if (p_next_cell_slice_ == NULL) {
            validateSignature("NumericVector(*next_cell_slice_)(const NumericVector&,const IntegerVector&,const IntegerVector&)");
            p_next_cell_slice_ = (Ptr_next_cell_slice_)R_GetCCallable("gRbase", "gRbase_next_cell_slice_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_next_cell_slice_(Rcpp::wrap(cell), Rcpp::wrap(dim), Rcpp::wrap(slice_set));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline IntegerVector slice2entry_(const IntegerVector& slice_cell, const IntegerVector& slice_set, const IntegerVector& dim) {
        typedef SEXP(*Ptr_slice2entry_)(SEXP,SEXP,SEXP);
        static Ptr_slice2entry_ p_slice2entry_ = NULL;
        if (p_slice2entry_ == NULL) {
            validateSignature("IntegerVector(*slice2entry_)(const IntegerVector&,const IntegerVector&,const IntegerVector&)");
            p_slice2entry_ = (Ptr_slice2entry_)R_GetCCallable("gRbase", "gRbase_slice2entry_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_slice2entry_(Rcpp::wrap(slice_cell), Rcpp::wrap(slice_set), Rcpp::wrap(dim));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline int get_cell_number_(const NumericVector& cell, const IntegerVector& dim, const IntegerVector& perm) {
        typedef SEXP(*Ptr_get_cell_number_)(SEXP,SEXP,SEXP);
        static Ptr_get_cell_number_ p_get_cell_number_ = NULL;
        if (p_get_cell_number_ == NULL) {
            validateSignature("int(*get_cell_number_)(const NumericVector&,const IntegerVector&,const IntegerVector&)");
            p_get_cell_number_ = (Ptr_get_cell_number_)R_GetCCallable("gRbase", "gRbase_get_cell_number_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_cell_number_(Rcpp::wrap(cell), Rcpp::wrap(dim), Rcpp::wrap(perm));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline IntegerVector perm_cell_entries_(const IntegerVector& perm, const IntegerVector& dim) {
        typedef SEXP(*Ptr_perm_cell_entries_)(SEXP,SEXP);
        static Ptr_perm_cell_entries_ p_perm_cell_entries_ = NULL;
        if (p_perm_cell_entries_ == NULL) {
            validateSignature("IntegerVector(*perm_cell_entries_)(const IntegerVector&,const IntegerVector&)");
            p_perm_cell_entries_ = (Ptr_perm_cell_entries_)R_GetCCallable("gRbase", "gRbase_perm_cell_entries_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_perm_cell_entries_(Rcpp::wrap(perm), Rcpp::wrap(dim));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline SEXP tab_perm_(const SEXP& tab, const SEXP& perm) {
        typedef SEXP(*Ptr_tab_perm_)(SEXP,SEXP);
        static Ptr_tab_perm_ p_tab_perm_ = NULL;
        if (p_tab_perm_ == NULL) {
            validateSignature("SEXP(*tab_perm_)(const SEXP&,const SEXP&)");
            p_tab_perm_ = (Ptr_tab_perm_)R_GetCCallable("gRbase", "gRbase_tab_perm_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_perm_(Rcpp::wrap(tab), Rcpp::wrap(perm));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP tab_expand_(const SEXP& tab, const SEXP& aux) {
        typedef SEXP(*Ptr_tab_expand_)(SEXP,SEXP);
        static Ptr_tab_expand_ p_tab_expand_ = NULL;
        if (p_tab_expand_ == NULL) {
            validateSignature("SEXP(*tab_expand_)(const SEXP&,const SEXP&)");
            p_tab_expand_ = (Ptr_tab_expand_)R_GetCCallable("gRbase", "gRbase_tab_expand_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_expand_(Rcpp::wrap(tab), Rcpp::wrap(aux));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP tab_align_(const SEXP& tab1, const SEXP& tab2) {
        typedef SEXP(*Ptr_tab_align_)(SEXP,SEXP);
        static Ptr_tab_align_ p_tab_align_ = NULL;
        if (p_tab_align_ == NULL) {
            validateSignature("SEXP(*tab_align_)(const SEXP&,const SEXP&)");
            p_tab_align_ = (Ptr_tab_align_)R_GetCCallable("gRbase", "gRbase_tab_align_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_align_(Rcpp::wrap(tab1), Rcpp::wrap(tab2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP tab_marg_(const SEXP& tab, const SEXP& marg) {
        typedef SEXP(*Ptr_tab_marg_)(SEXP,SEXP);
        static Ptr_tab_marg_ p_tab_marg_ = NULL;
        if (p_tab_marg_ == NULL) {
            validateSignature("SEXP(*tab_marg_)(const SEXP&,const SEXP&)");
            p_tab_marg_ = (Ptr_tab_marg_)R_GetCCallable("gRbase", "gRbase_tab_marg_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_marg_(Rcpp::wrap(tab), Rcpp::wrap(marg));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline NumericVector tab_op_(const NumericVector& tab1, const NumericVector& tab2, const char op = '*') {
        typedef SEXP(*Ptr_tab_op_)(SEXP,SEXP,SEXP);
        static Ptr_tab_op_ p_tab_op_ = NULL;
        if (p_tab_op_ == NULL) {
            validateSignature("NumericVector(*tab_op_)(const NumericVector&,const NumericVector&,const char)");
            p_tab_op_ = (Ptr_tab_op_)R_GetCCallable("gRbase", "gRbase_tab_op_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_op_(Rcpp::wrap(tab1), Rcpp::wrap(tab2), Rcpp::wrap(op));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector tab_add_(const NumericVector& tab1, const NumericVector& tab2) {
        typedef SEXP(*Ptr_tab_add_)(SEXP,SEXP);
        static Ptr_tab_add_ p_tab_add_ = NULL;
        if (p_tab_add_ == NULL) {
            validateSignature("NumericVector(*tab_add_)(const NumericVector&,const NumericVector&)");
            p_tab_add_ = (Ptr_tab_add_)R_GetCCallable("gRbase", "gRbase_tab_add_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_add_(Rcpp::wrap(tab1), Rcpp::wrap(tab2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector tab_subt_(const NumericVector& tab1, const NumericVector& tab2) {
        typedef SEXP(*Ptr_tab_subt_)(SEXP,SEXP);
        static Ptr_tab_subt_ p_tab_subt_ = NULL;
        if (p_tab_subt_ == NULL) {
            validateSignature("NumericVector(*tab_subt_)(const NumericVector&,const NumericVector&)");
            p_tab_subt_ = (Ptr_tab_subt_)R_GetCCallable("gRbase", "gRbase_tab_subt_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_subt_(Rcpp::wrap(tab1), Rcpp::wrap(tab2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector tab_mult_(const NumericVector& tab1, const NumericVector& tab2) {
        typedef SEXP(*Ptr_tab_mult_)(SEXP,SEXP);
        static Ptr_tab_mult_ p_tab_mult_ = NULL;
        if (p_tab_mult_ == NULL) {
            validateSignature("NumericVector(*tab_mult_)(const NumericVector&,const NumericVector&)");
            p_tab_mult_ = (Ptr_tab_mult_)R_GetCCallable("gRbase", "gRbase_tab_mult_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_mult_(Rcpp::wrap(tab1), Rcpp::wrap(tab2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector tab_div_(const NumericVector& tab1, const NumericVector& tab2) {
        typedef SEXP(*Ptr_tab_div_)(SEXP,SEXP);
        static Ptr_tab_div_ p_tab_div_ = NULL;
        if (p_tab_div_ == NULL) {
            validateSignature("NumericVector(*tab_div_)(const NumericVector&,const NumericVector&)");
            p_tab_div_ = (Ptr_tab_div_)R_GetCCallable("gRbase", "gRbase_tab_div_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_div_(Rcpp::wrap(tab1), Rcpp::wrap(tab2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector tab_div0_(const NumericVector& tab1, const NumericVector& tab2) {
        typedef SEXP(*Ptr_tab_div0_)(SEXP,SEXP);
        static Ptr_tab_div0_ p_tab_div0_ = NULL;
        if (p_tab_div0_ == NULL) {
            validateSignature("NumericVector(*tab_div0_)(const NumericVector&,const NumericVector&)");
            p_tab_div0_ = (Ptr_tab_div0_)R_GetCCallable("gRbase", "gRbase_tab_div0_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_div0_(Rcpp::wrap(tab1), Rcpp::wrap(tab2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline bool tab_equal_(const NumericVector& tab1, const NumericVector& tab2, double eps = 1e-12) {
        typedef SEXP(*Ptr_tab_equal_)(SEXP,SEXP,SEXP);
        static Ptr_tab_equal_ p_tab_equal_ = NULL;
        if (p_tab_equal_ == NULL) {
            validateSignature("bool(*tab_equal_)(const NumericVector&,const NumericVector&,double)");
            p_tab_equal_ = (Ptr_tab_equal_)R_GetCCallable("gRbase", "gRbase_tab_equal_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_equal_(Rcpp::wrap(tab1), Rcpp::wrap(tab2), Rcpp::wrap(eps));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

    inline NumericVector tab_list_mult_(const List& lst) {
        typedef SEXP(*Ptr_tab_list_mult_)(SEXP);
        static Ptr_tab_list_mult_ p_tab_list_mult_ = NULL;
        if (p_tab_list_mult_ == NULL) {
            validateSignature("NumericVector(*tab_list_mult_)(const List&)");
            p_tab_list_mult_ = (Ptr_tab_list_mult_)R_GetCCallable("gRbase", "gRbase_tab_list_mult_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_list_mult_(Rcpp::wrap(lst));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector tab_list_add_(const List& lst) {
        typedef SEXP(*Ptr_tab_list_add_)(SEXP);
        static Ptr_tab_list_add_ p_tab_list_add_ = NULL;
        if (p_tab_list_add_ == NULL) {
            validateSignature("NumericVector(*tab_list_add_)(const List&)");
            p_tab_list_add_ = (Ptr_tab_list_add_)R_GetCCallable("gRbase", "gRbase_tab_list_add_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tab_list_add_(Rcpp::wrap(lst));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_gRbase_RCPPEXPORTS_H_GEN_
